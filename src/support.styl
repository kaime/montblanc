// Browser support
no-support = false

lt = 'lt'
lte = 'lte'
gt = 'gt'
gte = 'gte'

browsers = json('support/browsers.json', { hash: true })

default-support = {
  'ie':                 8,
  'firefox':            10,
  'chrome':             12,
  'safari':             5,
  'opera':              12,
  'opera-mini':         no-support,
  'opera-mobile':       no-support,
  'android-chrome':     no-support,
  'android-browser':    no-support,
  'android-firefox':    no-support,
  'ios-safari':         no-support,
  'blackberry-browser': no-support,
  'ie-mobile':          no-support
}

for vendor, version in browsers
  v = 'support-for-' + vendor
  c = lookup(v)

  if c is a 'unit'
    if c < version[0]
      error() // Cannot set a version lower than minimum
  else if c is not no-support
    define(v, default-support[vendor]) // Set default version
  else
    error()

/**
 * Checks the corresponding `support-for-{vendor}` variables.
 */
has-support(expr)
  vendor = null
  version = null
  cmp = null

  for arg in expr
    if arg is a 'unit'
      version = arg
    else if arg in browsers
      vendor = arg
    else if arg in (lt lte gt gte)
      cmp = arg
    else
      warn('Dont know what %s is' % (arg)) // @todo this does not work

  if vendor is null
    error('bad args')

  s = lookup('support-for-' + vendor)

  if s is no-support
    return false
  else if version is not null
    if cmp is gt
      return s > version
    else if cmp is gte
      return s >= version
    else if cmp is lt
      return s < version
    else
      return s <= version
  else if cmp is not null
    error('bad args') // comparison operator but no version number
